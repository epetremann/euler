defmodule Problem29 do
  @moduledoc """
  https://projecteuler.net/problem=29

  Distinct powers

    Consider all integer combinations of ab for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:

    22=4, 23=8, 24=16, 25=32
    32=9, 33=27, 34=81, 35=243
    42=16, 43=64, 44=256, 45=1024
    52=25, 53=125, 54=625, 55=3125

    If they are then placed in numerical order, with any repeats removed,
    we get the following sequence of 15 distinct terms:

    4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

    How many distinct terms are in the sequence generated by ab
    for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?

  """

  def main() do
    time_start = Time.utc_now    # start chrono

    result = distinct_powers(100, 100)

    time_finish = Time.utc_now   # stop chrono
    time_sec = Time.diff(time_finish, time_start)
    time_msec = Time.diff(time_finish, time_start, :microsecond) |> rem(1_000_000) |> div(1000)

    IO.puts "Result         : #{result}"
    IO.puts "Execution time : #{time_sec}sec,  #{time_msec} msec"
  end #main


  def distinct_powers(amax \\ 100, bmax \\ 100) do
    for a <- 2..amax, b <- 2..bmax do
      power(a,b)
    end 
    |> Enum.uniq
    |> Enum.sort
    |> length
  end

  def power(a,b) do
    cond do
      b <= 0 -> 1
      true -> a*power(a,b-1)
    end
  end
  
end #module
