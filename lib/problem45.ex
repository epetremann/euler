defmodule Euler.Problem45 do
  @moduledoc """
  https://projecteuler.net/problem=45


  Triangular, pentagonal, and hexagonal

  Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:
    Triangle 	  	  Tn=n(n+1)/2 	  	1, 3, 6, 10, 15, ...
    Pentagonal 	  	Pn=n(3n−1)/2 	  	1, 5, 12, 22, 35, ...
    Hexagonal 	  	Hn=n(2n−1) 	  	1, 6, 15, 28, 45, ...

  It can be verified that T285 = P165 = H143 = 40755.

  Find the next triangle number that is also pentagonal and hexagonal.

  """

  @doc """
  The purpose of the `main` function is to measure the execution time of a function.
  """
  def main() do
    # start chrono
    time_start = Time.utc_now()

    result = triangle_penta_hex(1_000_000)

    # stop chrono
    time_finish = Time.utc_now()
    time_delta = Time.diff(time_finish, time_start, :microsecond)
    delta_sec = div(time_delta, 1_000_000)
    delta_msec = div(time_delta, 1_000)
    delta_micsec = rem(time_delta, 1_000)

    IO.puts("Result         : #{IO.inspect(result)}")
    IO.puts("Execution time : #{delta_sec}sec,  #{delta_msec}msec #{delta_micsec} microsec")
  end

  @doc """
  """
  def triangle_penta_hex(nmax) do
    1..nmax
    |> Stream.map(&triangle/1)
    |> Stream.filter(&is_pent_hexa?/1)
    |> Enum.to_list()
  end

  def triangle(n), do: div(n * (n + 1), 2)
  def pentagon(n), do: div(n * (3 * n - 1), 2)
  def hexagon(n), do: n * (2 * n - 1)
  def is_pentagon?(n), do: do_is_pentagon?(n, 1)
  def is_hexagon?(n), do: do_is_hexagon?(n, 1)
  def is_pent_hexa?(n), do: is_pentagon?(n) && is_hexagon?(n)

  def do_is_pentagon?(n, p) do
    penta = pentagon(p)

    cond do
      penta > n -> false
      penta == n -> true
      true -> do_is_pentagon?(n, p + 1)
    end
  end

  def do_is_hexagon?(n, p) do
    hexa = hexagon(p)

    cond do
      hexa > n ->
        false

      hexa == n ->
        IO.inspect(n)
        true

      true ->
        do_is_hexagon?(n, p + 1)
    end
  end
end
